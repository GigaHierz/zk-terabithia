{
  "address": "0x5d45B4A30193ba5efB748B19Ae6C5C46aA2DC3fC",
  "abi": [
    {
      "inputs": [],
      "name": "AssetLogic__transferAssetFromContract_notNative",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AssetLogic__transferAssetToContract_ethWithErcTransfer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AssetLogic__transferAssetToContract_notAmount",
      "type": "error"
    }
  ],
  "transactionHash": "0x0dc203a27155f4f7f4d89df1a38dc5737b3feb171e66e15db0b71c97e0fab4de",
  "receipt": {
    "to": null,
    "from": "0x54BAA998771639628ffC0206c3b916c466b79c89",
    "contractAddress": "0x5d45B4A30193ba5efB748B19Ae6C5C46aA2DC3fC",
    "transactionIndex": 27,
    "gasUsed": "402015",
    "logsBloom": "0x
    "blockHash": "0xa849de64d737134cf8907d89204a5c1d6b643b90fbf445a92a1b2a2bffe59b15",
    "transactionHash": "0x0dc203a27155f4f7f4d89df1a38dc5737b3feb171e66e15db0b71c97e0fab4de",
    "logs": [],
    "blockNumber": 10538673,
    "cumulativeGasUsed": "9908807",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8d94bcf427cf18c8df76e8f625e51b3c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AssetLogic__transferAssetFromContract_notNative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetLogic__transferAssetToContract_ethWithErcTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetLogic__transferAssetToContract_notAmount\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"transferAssetToContract(address,uint256,IWrapped)\":{\"details\":\"If using the native asset, will automatically wrap\",\"params\":{\"_assetId\":\"- The address to transfer\",\"_specifiedAmount\":\"- The specified amount to transfer. May not be the actual amount transferred (i.e. fee on transfer tokens)\",\"_wrapper\":\"- The address of the wrapper for the native asset on this domain\"},\"returns\":{\"_0\":\"The assetId of the transferred asset\",\"_1\":\"The amount of the asset that was seen by the contract (may not be the specifiedAmount if the token is a fee-on-transfer token)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"transferAssetToContract(address,uint256,IWrapped)\":{\"notice\":\"Handles transferring funds from msg.sender to the Connext contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/Connext/AssetLogic.sol\":\"AssetLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/interfaces/IWrapped.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\n// TODO: need a correct interface here\\ninterface IWrapped {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xd7d1bcdf3c4f5674b9c42e5a0edfd3e44ae7b361ca7d20a98bb6c4bba83c71cc\",\"license\":\"UNLICENSED\"},\"contracts/lib/Connext/AssetLogic.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"../../interfaces/IWrapped.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nlibrary AssetLogic {\\n  error AssetLogic__transferAssetToContract_notAmount();\\n  error AssetLogic__transferAssetToContract_ethWithErcTransfer();\\n  error AssetLogic__transferAssetFromContract_notNative();\\n\\n  /**\\n   * @notice Handles transferring funds from msg.sender to the Connext contract.\\n   * @dev If using the native asset, will automatically wrap\\n   * @param _assetId - The address to transfer\\n   * @param _specifiedAmount - The specified amount to transfer. May not be the\\n   * actual amount transferred (i.e. fee on transfer tokens)\\n   * @param _wrapper - The address of the wrapper for the native asset on this domain\\n   * @return The assetId of the transferred asset\\n   * @return The amount of the asset that was seen by the contract (may not be the specifiedAmount\\n   * if the token is a fee-on-transfer token)\\n   */\\n  function transferAssetToContract(\\n    address _assetId,\\n    uint256 _specifiedAmount,\\n    IWrapped _wrapper\\n  ) external returns (address, uint256) {\\n    uint256 trueAmount = _specifiedAmount;\\n\\n    if (_assetId == address(0)) {\\n      // When transferring native asset to the contract, always make sure that the\\n      // asset is properly wrapped\\n      if (msg.value != _specifiedAmount) revert AssetLogic__transferAssetToContract_notAmount();\\n      _wrapper.deposit{value: _specifiedAmount}();\\n      _assetId = address(_wrapper);\\n    } else {\\n      // Validate correct amounts are transferred\\n      uint256 starting = IERC20Upgradeable(_assetId).balanceOf(address(this));\\n      if (msg.value != 0) revert AssetLogic__transferAssetToContract_ethWithErcTransfer();\\n      SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(_assetId), msg.sender, address(this), _specifiedAmount);\\n      // Calculate the *actual* amount that was sent here\\n      trueAmount = IERC20Upgradeable(_assetId).balanceOf(address(this)) - starting;\\n    }\\n\\n    return (_assetId, trueAmount);\\n  }\\n\\n  /**\\n   * @notice Handles transferring funds from msg.sender to the Connext contract.\\n   * @dev If using the native asset, will automatically unwrap\\n   * @param _assetId - The address to transfer\\n   * @param _to - The account that will receive the withdrawn funds\\n   * @param _amount - The amount to withdraw from contract\\n   * @param _wrapper - The address of the wrapper for the native asset on this domain\\n   */\\n  function transferAssetFromContract(\\n    address _assetId,\\n    address _to,\\n    uint256 _amount,\\n    IWrapped _wrapper\\n  ) internal {\\n    // No native assets should ever be stored on this contract\\n    if (_assetId == address(0)) revert AssetLogic__transferAssetFromContract_notNative();\\n\\n    if (_assetId == address(_wrapper)) {\\n      // If dealing with wrapped assets, make sure they are properly unwrapped\\n      // before sending from contract\\n      _wrapper.withdraw(_amount);\\n      AddressUpgradeable.sendValue(payable(_to), _amount);\\n    } else {\\n      // Transfer ERC20 asset\\n      SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(_assetId), _to, _amount);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4625d1a8dd3330dc679fc34b199c64fe17925404d330babc019b1e426f136317\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x61064e61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063c2ba76251461003a575b600080fd5b81801561004657600080fd5b5061005a6100553660046104fb565b61007d565b604080516001600160a01b03909316835260208301919091520160405180910390f35b600080836001600160a01b03861661010b578434146100af5760405163ae5ac49360e01b815260040160405180910390fd5b836001600160a01b031663d0e30db0866040518263ffffffff1660e01b81526004016000604051808303818588803b1580156100ea57600080fd5b505af11580156100fe573d6000803e3d6000fd5b505050505083955061021b565b6040516370a0823160e01b81523060048201526000906001600160a01b038816906370a0823190602401602060405180830381865afa158015610152573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610176919061053d565b905034156101975760405163aea6686d60e01b815260040160405180910390fd5b6101a387333089610224565b6040516370a0823160e01b815230600482015281906001600160a01b038916906370a0823190602401602060405180830381865afa1580156101e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020d919061053d565b6102179190610556565b9150505b94959350505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261027e908590610284565b50505050565b60006102d9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166103609092919063ffffffff16565b80519091501561035b57808060200190518101906102f7919061057b565b61035b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b505050565b606061036f8484600085610379565b90505b9392505050565b6060824710156103da5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610352565b6001600160a01b0385163b6104315760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610352565b600080866001600160a01b0316858760405161044d91906105c9565b60006040518083038185875af1925050503d806000811461048a576040519150601f19603f3d011682016040523d82523d6000602084013e61048f565b606091505b509150915061049f8282866104aa565b979650505050505050565b606083156104b9575081610372565b8251156104c95782518084602001fd5b8160405162461bcd60e51b815260040161035291906105e5565b6001600160a01b03811681146104f857600080fd5b50565b60008060006060848603121561051057600080fd5b833561051b816104e3565b9250602084013591506040840135610532816104e3565b809150509250925092565b60006020828403121561054f57600080fd5b5051919050565b60008282101561057657634e487b7160e01b600052601160045260246000fd5b500390565b60006020828403121561058d57600080fd5b8151801515811461037257600080fd5b60005b838110156105b85781810151838201526020016105a0565b8381111561027e5750506000910152565b600082516105db81846020870161059d565b9190910192915050565b602081526000825180602084015261060481604085016020870161059d565b601f01601f1916919091016040019291505056fea2646970667358221220147771aaa57b8ec3d3f1d5d0651fd3476284162c756cc9c4fed355ef8bbb002364736f6c634300080b0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063c2ba76251461003a575b600080fd5b81801561004657600080fd5b5061005a6100553660046104fb565b61007d565b604080516001600160a01b03909316835260208301919091520160405180910390f35b600080836001600160a01b03861661010b578434146100af5760405163ae5ac49360e01b815260040160405180910390fd5b836001600160a01b031663d0e30db0866040518263ffffffff1660e01b81526004016000604051808303818588803b1580156100ea57600080fd5b505af11580156100fe573d6000803e3d6000fd5b505050505083955061021b565b6040516370a0823160e01b81523060048201526000906001600160a01b038816906370a0823190602401602060405180830381865afa158015610152573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610176919061053d565b905034156101975760405163aea6686d60e01b815260040160405180910390fd5b6101a387333089610224565b6040516370a0823160e01b815230600482015281906001600160a01b038916906370a0823190602401602060405180830381865afa1580156101e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020d919061053d565b6102179190610556565b9150505b94959350505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261027e908590610284565b50505050565b60006102d9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166103609092919063ffffffff16565b80519091501561035b57808060200190518101906102f7919061057b565b61035b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b505050565b606061036f8484600085610379565b90505b9392505050565b6060824710156103da5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610352565b6001600160a01b0385163b6104315760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610352565b600080866001600160a01b0316858760405161044d91906105c9565b60006040518083038185875af1925050503d806000811461048a576040519150601f19603f3d011682016040523d82523d6000602084013e61048f565b606091505b509150915061049f8282866104aa565b979650505050505050565b606083156104b9575081610372565b8251156104c95782518084602001fd5b8160405162461bcd60e51b815260040161035291906105e5565b6001600160a01b03811681146104f857600080fd5b50565b60008060006060848603121561051057600080fd5b833561051b816104e3565b9250602084013591506040840135610532816104e3565b809150509250925092565b60006020828403121561054f57600080fd5b5051919050565b60008282101561057657634e487b7160e01b600052601160045260246000fd5b500390565b60006020828403121561058d57600080fd5b8151801515811461037257600080fd5b60005b838110156105b85781810151838201526020016105a0565b8381111561027e5750506000910152565b600082516105db81846020870161059d565b9190910192915050565b602081526000825180602084015261060481604085016020870161059d565b601f01601f1916919091016040019291505056fea2646970667358221220147771aaa57b8ec3d3f1d5d0651fd3476284162c756cc9c4fed355ef8bbb002364736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "transferAssetToContract(address,uint256,IWrapped)": {
        "details": "If using the native asset, will automatically wrap",
        "params": {
          "_assetId": "- The address to transfer",
          "_specifiedAmount": "- The specified amount to transfer. May not be the actual amount transferred (i.e. fee on transfer tokens)",
          "_wrapper": "- The address of the wrapper for the native asset on this domain"
        },
        "returns": {
          "_0": "The assetId of the transferred asset",
          "_1": "The amount of the asset that was seen by the contract (may not be the specifiedAmount if the token is a fee-on-transfer token)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "transferAssetToContract(address,uint256,IWrapped)": {
        "notice": "Handles transferring funds from msg.sender to the Connext contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}